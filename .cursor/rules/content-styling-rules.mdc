---
name: Content Styling Rules
description: Consistent color usage and markdown conventions for blog content
ruleType: Contextual
scopes: ["content/**/*.md"]
tags: [content, markdown, colors, style]
---

## Color usage (via span classes)

### Purpose

- Provide semantic, consistent color meaning using inline spans.

### Strict Guidelines

#### Axioms

1. Each color has emphasis levels.
2. You as an expert in the article's content, judge what emphasis level each snippet of the article is.
3. You color "a word" or "words" or "a sentence" at once, with a single span tag.
4. You cannot nest span tags.

#### Emphasis Level

- Emphasis level 1: text-skyblue
- Emphasis level 2: text-yellow
- Emphasis level 3: text-orange
- Emphasis level 4: text-red
- Never to be used: text-blue, text-grey, text-pink

### Best Practices

#### Consistency is key

- Same patterns micro within sentences

```
- <span class="text-skyblue">장기간의 컨텐츠 마케팅</span> => <span class="text-red">시간이 많이 듬.</span>
- <span class="text-skyblue">자기가 가지고 있는 플랫폼에서의 크로스 셀링</span> => <span class="text-red">이미 성공한 사업이 있어야함.</span>
- <span class="text-skyblue">단기간의 SNS 마케팅</span> => <span class="text-red">돈이 많이 듬.</span>
```

- Same patterns macro across sections
- If you applied emphasis in certain section, do the same for same level of heirarchies elsewhere.
- Here it emphasized title and a word of a section, its best you do the same in other sections.

```

### <span class="text-skyblue">**prototype vs \_\_proto\_\_**</span>

JS는 모든 객체에서 `__proto__` 혹은 `Object.getPrototypeOf`로 `[[Prototype]]`내부 슬롯을 볼 수 있다.
`__proto__`와는 사뭇 다른 `prototype`은 함수 객체에만 존재한다.

- <span class="text-orange">함수의 `.prototype`는 본인이 `new`로 생성할 객체의 프로토타입을 반환</span>하고
- <span class="text-orange">함수의 `.__proto__`는 따로 설정해주지 않으면 언제나 `Function.prototype`을 반환</span>한다.


// some random texts in between


### <span class="text-skyblue">**클래스의 경우**</span>

위의 방식도 pseudo-classical inheritance이고, class로 구현하는 것도 pseudo-classical inheritance라고 한다. 근데 구현에 따라서 프로토타입 체인 갯수가 다르다.

<span class="text-orange">클래스는 프로토타입 체인이 두 개이고, 위 방식의 함수들로 만든 pseudo-classical inheritance는 프로토타입 체인이 하나이다.</span>

```

- Same emphasis levels within same hierarchy

```
// don't do this
- Most developers reach for Redis when they need caching. It’s <span class="text-orange">fast</span>, <span class="text-orange">reliable</span>, and works great as a <span class="text-yellow">centrally managed data store</span>.

// do this
- Most developers reach for Redis when they need caching. It’s <span class="text-orange">fast</span>, <span class="text-orange">reliable</span>, and works great as a <span class="text-orange">centrally managed data store</span>.
```

#### `text-purple` is often used as top line quotes of the article to deliver colloquial feeling.

```
_<span class="text-purple">디써클에서 1개월 동안 MVP를 만들고 3개월 동안 다양한 일들을 하며 느낀점들</span>_
```

#### Imporant sentences that deliver conclusions can be colored as a whole.

```
### **1-2. 감정적으로 영향받지 않기 위한 전략 2 - ideal-self**

몇 년 뒤 최상의 상태인 본인을 정확하게 상상하고 지금과의 괴리를 느끼며 점차 그쪽으로 나를 당겨가면 많은 도움이 된다고 한다.
실제로 해보니 마음이 전보단 편안해짐을 느끼고 있다. 내가 스스로 아쉽다고 생각하는 지난 10년을 앞으로 10년 동안 메꿔나가야한다.

<span class="text-skyblue">이상적인 자신을 명확하게 상상해야한다. 내가 성장할 미래를 계속 생각하고 있으면 자신감이 오르고 외부에서 오는 잡음에 강해진다.</span>
```

#### Links should be highlighted with `text-green`

```
ECMAScript의 Execution Context 부분을 2회독하였지만 관련 내용은 찾기가 힘들었다. 그래서 임우찬님의 [블로그](https://m.blog.naver.com/dlaxodud2388/222655214381)에서 Variable Environment의 존재 의의를 찾았는데, 이분이 말씀하신 작동 원리의 출처는 블로그 내에서는 불명확했다. 스택오버플로우를 찾던 중 [비슷한 글](https://stackoverflow.com/questions/69417158/how-will-the-lexical-environment-and-the-variable-environment-will-look-like-at)을 발견하여 두 개의 글을 합쳐서 정리해본다.
```

```
참고:

- [ECMAScript 2024](https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#sec-execution-contexts)
- [ECMAScript 5.1](https://262.ecma-international.org/5.1/#sec-10.3)
- [Variable Environment vs lexical environment](https://stackoverflow.com/questions/23948198/variable-environment-vs-lexical-environment)
- [[JavaScript] ES6의 Execution Context(실행 컨텍스트)의 동작 방식과 Lexical Nesting Structure(Scope chain)](https://m.blog.naver.com/dlaxodud2388/222655214381)
- [Why do we need VariableEnvironment to identify the state of an Execution Context in Javascript?](https://stackoverflow.com/questions/61682119/why-do-we-need-variableenvironment-to-identify-the-state-of-an-execution-context)
- [How will the Lexical environment and the Variable Environment will look like at the following code](https://stackoverflow.com/questions/69417158/how-will-the-lexical-environment-and-the-variable-environment-will-look-like-at)
```
