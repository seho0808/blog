{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/til/2025-07-15/","result":{"data":{"markdownRemark":{"html":"<h2><strong>TIL 15</strong></h2>\n<ul>\n<li>다른 회사들이 다 코틀린 자바만 써서 노드를 하는게 불리하게 느껴진다.</li>\n<li>긍정적으로 생각하자면 오히려 node 진영에 있어서의 장점이 분명히 존재한다.</li>\n<li>java 코드도 대학 때 많이 서서 익숙하기에, 읽고 취할 수는 있다.</li>\n<li>나중에 java로 꼭 해야하는 날이 오는 것에 대비한다면 node를 최대한으로 잘하는 것이 답이라고 생각한다. 문법적인 세부 내역을 빼면 모든 것은 만날 것이라고 생각한다. 심지어 문법적인 것과 멀티스레드 처리에 대한 이해조차.</li>\n<li>자바에서 보다 조금 더 오픈소스 기여가 오픈되어있다보니..</li>\n<li>express/nest에서 있었던 나날을 최대한 알차게 보내서 미친듯한 레벨의 관점들을 쌓아나아가야함.</li>\n<li>Nest에 조만간 컨트리뷰팅하고 싶어서 nest 컨트리뷰터들한테 직접 디스코드로 문의넣어보았는데, @nest/throttle인가 그 프로젝트 메인테이너랑 잠깐 이야기 나누었었음. nest는 패키지 레벨로 메인테인되고 코어 nest js는 한 명이 관리하는듯함. 컨트리뷰터 보면 커밋을 모두 혼자 만들고 있음.</li>\n<li>Nest 이슈들이 많이 없어서 이슈들 읽다가 발견한게 nest가 의존하고 있는 class-validator에 조금 문제가 많아보였음. 그쪽은 이슈도 훨씬 많아보였음.</li>\n<li>이번 항해 코스가 끝나면 그쪽 유지보수하는 것도 나쁘지 않을듯. JS 생태계에 있는 대부분의 프로젝트에 기여 한두번씩 ~ 그 이상씩 해보는 걸 목표로해봐도 괜찮을듯. 파일 구조나 코딩 철학을 모두 감상할 수 있으니..</li>\n</ul>\n<h2><strong>TIL 17</strong></h2>\n<ul>\n<li>항해 멘토들 + 지인들에게 똑같이 물어보니 생각보다 ERD에 대해서는 이론적으로 접근하기보다는 실무에서 할 때 오류 없이 만들기 위해서 초반에 끊임없이 수정하는 식으로 접근하고 있었음.</li>\n<li>외래키가 트래픽 많아지면 느려져서 안쓴다는 것도 처음 들었음.</li>\n</ul>\n<h2><strong>TIL 18</strong></h2>\n<ul>\n<li>이전 memo maniac이 더 가능한 아이디어라고 느끼는중. 노트 앱 중에 무료로 모든 소스에 싱크하는 앱이 없음.</li>\n</ul>","frontmatter":{"date":"July 15, 2025","slug":"/til/2025-07-15","title":"2025 07 15","subtitle":"Logging what I learned daily"}}},"pageContext":{"id":"892224ed-6a93-5a0e-a7f5-87eee9c2c7d3","frontmatter__slug":"/til/2025-07-15","__params":{"frontmatter__slug":"til"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}