{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/til/2025-06-22/","result":{"data":{"markdownRemark":{"html":"<h1>TIL 21</h1>\n<h2><em>Effective Software Testing</em> is so much easier to read now.</h2>\n<ul>\n<li>This book is by Mauricio Aniche</li>\n<li>3 months ago, I had hard time reading this book</li>\n<li>After extensively implementing test cases for my repository(600+ test cases - mostly integration tests), now I realize I can read most of the chapters effortlessly.</li>\n<li>I am planning to write some posts (less important ones for now) for concepts that were still unfamiliar to me - mutant testing, design by contract, etc.</li>\n</ul>\n<h2><em>Hexagonal</em>, is it the only way to make my codebase testable?</h2>\n<ul>\n<li>currently my repo is mostly CRUD layered architecture.</li>\n<li>it has 80% integration test 10% e2e and a very few unit tests.</li>\n<li>I feel like there is no other way than hexagonal architecture to completely escape from this \"un-unit-testable\" state.</li>\n<li>gpt says using aggregate root will make it easier to test... hmmm really? idk.</li>\n</ul>\n<h2>RESTful</h2>\n<ul>\n<li>Do we reeeally need to make APIs strictly restful?</li>\n<li>I still find so many cases where using verbs or non-nouns on route naming make representation much cleaner.</li>\n<li>Might need to read some extensive restful architecture books or articles.</li>\n</ul>\n<h1>TIL 22</h1>\n<h2><em>Onion Architecture</em>? <em>Clean Architecture TM</em>?</h2>\n<ul>\n<li>\n<p>Found some awesome architecture that is less heavier than Hexognal but can still make my company's codes more testable.</p>\n</li>\n<li>\n<p>There seems to be many articles on these topics.</p>\n</li>\n<li>\n<p>I will be able to write articles when I am super confident on those subjects!</p>\n</li>\n<li>\n<p>Planning on applying Onion or Clean to my actual company project.</p>\n</li>\n<li>\n<p><a href=\"https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/\">https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/</a> => need to read this soon</p>\n</li>\n</ul>\n<h2>Nest js review</h2>\n<ul>\n<li>Currently building a coffee menu ordering system with NestJS and noticing it allows quite a bit of flexibility. Feels like it inherits the spirit of Express.</li>\n<li>For example, unlike Spring, it doesn't force using DTOs in every layer and most things seem quite flexible.</li>\n<li>TypeORM seems significantly cleaner than Sequelize? Sequelize models look quite messy. Need to explore more though.</li>\n</ul>","frontmatter":{"date":"June 22, 2025","slug":"/til/2025-06-22","title":"Daily TIL Note 2025 06 22","subtitle":"Logging what I learned daily"}}},"pageContext":{"id":"bbdfc28d-efed-5a07-be54-edd7f70fe6a9","frontmatter__slug":"/til/2025-06-22","__params":{"frontmatter__slug":"til"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}