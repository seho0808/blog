{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/til/2025-06-25/","result":{"data":{"markdownRemark":{"html":"<h2><strong>TIL 25</strong></h2>\n<ul>\n<li>나의 테케 프레임워크</li>\n</ul>\n<ol>\n<li>함수 인터페이스로 시작하기</li>\n</ol>\n<ul>\n<li>LLM - 함수 인풋 아웃풋 인터페이스로 모든 테스트 케이스 목록 구상</li>\n<li>LLM - bp에 맞는지 모든 테케 있는지 확인 - edge case 종류 확인</li>\n<li>LLM - 테스트 케이스 구상된 것 구현</li>\n<li>LLM - 함수 구현</li>\n<li>LLM - 함수 테스트 통과할 때까지 수정</li>\n<li>LLM - Structural Testing 테케 목록 구상</li>\n<li>LLM - Structural Testing bp 맞는지 모든 테케 있는지 확인</li>\n<li>LLM - Structural Testing 구상된 것 구현</li>\n<li>LLM - Structural Testing 통과할 때까지 수정</li>\n</ul>\n<ol start=\"2\">\n<li>함수도 없이 TDD</li>\n</ol>\n<ul>\n<li>고민중</li>\n</ul>\n<h2><strong>TIL 30</strong></h2>\n<h4>sp3는 fp로, be 플랫폼은 oop로?</h4>\n<ul>\n<li>크롤러 쪽은 etl 절차가 많아서 전체를 함수형으로 만들면 좋을 것 같고</li>\n<li>be 플랫폼은 fp 와 oop의 사이를 추구해야할듯.</li>\n</ul>\n<h4>clean architecture에서 fp, oop의 이야기 - 둘이 섞여있는 것에 대하여</h4>\n<ul>\n<li>낮에 fp, oop에 대한 이야기를 순재님과 몇 번 나누는 중</li>\n<li>순재님은 ts에서는 fp로 모두 짜는 것이 맞다고 생각하신다고 하심.</li>\n<li>나는 clean architecture이 oop와 fp가 섞여있는 스타일이라고 생각함. use case자체는 함수형에 가깝지만, 엔티티와 usecase들을 구성할 때 oop스럽게 연성해서 사용이 가능하지 않을까 라고 생각중임.\n<ul>\n<li>즉, use case 자체는 함수형 + 절차형 느낌(procedural한 것을 함수로 묶은)이며 그 절차에 들어가는 엔티티들의 개별적인 행동이나 특성을 표현할 때에는 oop로 구현해도 좋지 않을까라고 생각중이다.</li>\n</ul>\n</li>\n</ul>\n<h4>pg-mem으로 테케 돌아가는 속도 올리기</h4>\n<ul>\n<li>순재님이 pg-mem이라는 대안을 찾아내심</li>\n<li>Pg-mem이 2.2천개 스타 밖에 없어서 안정적일지는 의문이지만 트라이해보는 것은 타당해보임.</li>\n<li>찾아보니 락 관련된 테스팅은 불가하다고함. (row level lock, table lock 등) 그래서 일부 테스트 케이스들에는 제한적일듯함.</li>\n<li>Pg-mem이 쓸만하다면 docker로 디비 여러개 띄우지 않고도 postgres를 병렬로 통합 테스팅할 수 있을듯함.</li>\n</ul>","frontmatter":{"date":"June 25, 2025","slug":"/til/2025-06-25","title":"2025 06 25","subtitle":"Logging what I learned daily"}}},"pageContext":{"id":"31be43da-4b8d-556d-af2a-df472773e2e9","frontmatter__slug":"/til/2025-06-25","__params":{"frontmatter__slug":"til"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}