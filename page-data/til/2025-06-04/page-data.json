{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/til/2025-06-04/","result":{"data":{"markdownRemark":{"html":"<h2>06-04</h2>\n<h4>1. Is GQL more trouble than its worth?</h4>\n<p>Biggest troubles I am facing:</p>\n<ul>\n<li>Why in the h*ll is it not possible to organize mutations? It makes Apollo client so much harder to inspect.</li>\n<li>So my team decided to use GQL only for CRUD heavy purposes for resources and other POST operations on REST.\n<ul>\n<li>Still don't know if this is the best practice. I will have to go through multiple more projects to see how it goes.</li>\n</ul>\n</li>\n</ul>\n<h4>2. Some of my biggest mistakes I made while usin GQL for the first time (in production)</h4>\n<p>Maybe I would have done better with more expreience in GQL but GQL feels like you have to make APIs very abstract\nfrom the beginning, focusing on the data.</p>\n<p>However, timeline squeezed and I couldn't quite make resolvers that scalable. It was more of a page basis fit.</p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\"># biggest problem here is that single Paper object item is not callable without it being sub-instance of Lab\nLab {\n PaperSection {\n  total_count\n  items {\n    title\n    journal\n    # some more fields\n  }\n }\n}</code></pre></div>\n<p>Could be problem with how data is setup, as each column is just JSONB, not a normalized table. So each\nLab table has Paper JSON array, Award JSON array, Publication JSON array, ... It was like that since we made a super lean system last year and never really\nwas urged to revamp and normalize them. Since they are arrays of JSONs, we need to use GIN index against those JSONB columns in order to index them.</p>\n<p>Since that is the case, I just figured I would rather make query like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\"># kind of anti pattern we are currently using\npaperByUuid(lab_id, paper_uuid) {\n  title\n  journal\n}\n\n# BP - actually should have been\npaper(paper_uuid) {\n  title\n  journal\n}</code></pre></div>\n<p><em>Project Timeframe</em>, <em>No Expreience</em>, and <em>Unerlying Data Structure</em> seduced me to use that anti pattern you are seeing above.</p>\n<p>Now that gql is not that scalable in multiple places througout the platform, I felt like it was a bottleneck for future projects.</p>\n<p>Might have to revamp into the BP structure? I will have to see after I actually do it.</p>\n<h4>3. Kind of not liking HttpError object I made a year ago</h4>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**\n * 학생 사이드 가입 함수\n * @param registerData 가입을 위한 데이터\n * @param userId 가입한 유저의 id\n * @param t 트랜잭션\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStudentRegistration</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>\n  registerData<span class=\"token operator\">:</span> RegisterData<span class=\"token punctuation\">,</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  t<span class=\"token operator\">:</span> Transaction\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> studentResearcherRepository<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span>\n        user_id<span class=\"token operator\">:</span> userId<span class=\"token punctuation\">,</span>\n        organization<span class=\"token operator\">:</span> registerData<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">.</span>organization<span class=\"token punctuation\">,</span>\n        department<span class=\"token operator\">:</span> registerData<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">,</span>\n        position<span class=\"token operator\">:</span> registerData<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      t\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HttpError</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpError</span><span class=\"token punctuation\">(</span>\n        <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"UNKNOWN_ERROR_CREATING_STUDENT_RESEARCHER\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"학생 연구원 생성에 실패했습니다.\"</span><span class=\"token punctuation\">,</span>\n        error\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We have this kind of error handling and it was lean enough in the beginning.\nObviously, it looks better to handle Http Error codes either in controller or all within Express Error Handler.\nNow that the system is large, it feels much safter and controllable to move all those error codes into single constant Enum and\ncentralize http error code handling at express error handling module.</p>\n<h4>4. Some thoughts about reviewing new / quick change figma docs</h4>\n<p>When receiving slack alert for some design changes or flow changes, I would only try to read ones that are directly related to me.\nHowever, I realized most of the design changes contain some kind of changes not only in FE but also in BE. As I of suck at imagining\nhow a product should be implemented (I am still figuring out why), I also think it would be a great practice to try to imagine every bits\nof implementation until there is no murky bit.</p>\n<p>Also trying to find best practices to imagine the implementation.</p>\n<h4>5. Feeling like TIL is quite nice</h4>\n<p>TIL lets me come up with Action Plan and direct feedback in a couple days.</p>\n<h4>6. How do you create an immaculate backend api, even with time crunch?</h4>\n<ul>\n<li>\n<p>exploring edge cases?</p>\n</li>\n<li>\n<p>just loads of experience?</p>\n</li>\n<li>\n<p>test cases? => seems to help a lot. also llms generate test cases quite well.</p>\n<ul>\n<li>only down side with test cases is that testing becomes slower and slower as we use integration tests mostly.</li>\n</ul>\n</li>\n</ul>\n<p>I need more contemplation on this topic.</p>\n<h4>7. Thoughts are PR review</h4>\n<ul>\n<li>Currently I am the only when that can fully understand all the codes produced in the team.</li>\n<li>I cannot physically go through every bits.</li>\n<li>My new goal:\n<ul>\n<li>For important bits, manually git pull and test the software</li>\n<li>For less important bits, capture\n<ul>\n<li><em>what is the issue (ticket)</em>\n<ul>\n<li>for fix: the bug scenario itself</li>\n<li>for feat: the feature itself</li>\n</ul>\n</li>\n<li><em>what caused that issue (ticket)</em>\n<ul>\n<li>for fix: cause of the bug</li>\n<li>for feat: why was this feature added in the first place?</li>\n</ul>\n</li>\n<li><em>what was done to solve that issue</em>\n<ul>\n<li>for fix: the approach &#x26; main code snippets</li>\n<li>for feat: the approach &#x26; main code snippets</li>\n</ul>\n</li>\n<li>not the details.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"June 04, 2025","slug":"/til/2025-06-04","title":"Daily TIL Note 2025 06 04","subtitle":"Logging what I learned daily"}}},"pageContext":{"id":"8bf2f858-2d00-59aa-ab0f-70cca5e215c7","frontmatter__slug":"/til/2025-06-04","__params":{"frontmatter__slug":"til"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}