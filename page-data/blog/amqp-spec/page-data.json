{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/amqp-spec/","result":{"data":{"markdownRemark":{"html":"<h2><strong>AMQP Specification Review (section 2.1 only)</strong></h2>\n<p class=\"text-time\">Initial Upload 2025-06-08 / Latest Modification 2025-06-08</p>\n<p><em><span class=\"text-purple\">Summary and review of the amqp spec section 2.1</span></em></p>\n<p>This review is based on the spec at <a href=\"https://www.rabbitmq.com/amqp-0-9-1-protocol\">https://www.rabbitmq.com/amqp-0-9-1-protocol</a>.</p>\n<p>It is only 40 pages written in plain english. (0-9-1)</p>\n<p>I tried to read through section 2.1 only (the main architecture part)</p>\n<h3>My overall thought on section 2.1</h3>\n<p>the most important bits:</p>\n<ol>\n<li>\n<p>It first seemed like everything is setup, but it is much more flexible at RUNTIME</p>\n<ul>\n<li>exchange is more or less controlled by the producer. (at least that seems like the best practice)</li>\n<li>queue is more or less controlled by the consumer. (at least that seems like the best practice)</li>\n<li>there are cases where one application creates a mq for itself and removed that queue on runtime.</li>\n</ul>\n</li>\n<li>\n<p>Transactions, cutting off connections</p>\n<ul>\n<li>there are weird details I found which is not necessarily obvious.</li>\n<li>transactions exist.</li>\n<li>when any error occurs, entire channel or connection is simply closed.</li>\n</ul>\n</li>\n</ol>\n<h3>Paraphrased Version</h3>\n<p>Below is what I paraphrased section 2.1 into a little bit easier format. 🌟 is my thoughts and I wanted to highlight them. It makes contents easier to digest.\nOnly the code + mermaid of this article is generated by gpt.</p>\n<h3>2.1.1 Main Entities</h3>\n<h3>2.1.1.1 The Message Queue</h3>\n<p>You can build queues various properties. Detailed options are not formally defined in AMQP.</p>\n<p>Examples of what you can build:</p>\n<ul>\n<li>store-and-forward queue => durable + shared\n<ul>\n<li>🌟 durable + shared means queue is supposed to live forever + shared between queue consumers.</li>\n</ul>\n</li>\n<li>private reply queue => temporary + server-named + exclusive\n<ul>\n<li>🌟 means queue can die at any moment + the amqp server generates random server name + cosumed by one consumer.</li>\n<li>🌟 <code class=\"language-text\">channel.assertQueue('', { exclusive: true });</code> => <code class=\"language-text\">amq.gen-7sf9QJYV9x0yCwI8Qlq0vA</code></li>\n</ul>\n</li>\n<li>private subscription queue => temporary + server-named + exclusive</li>\n</ul>\n<h3>2.1.1.2 The Exchange</h3>\n<ul>\n<li>Exchanges === matching and routing engines</li>\n<li>Exchange type VS instance!\n<ul>\n<li>Exchange type?\n<ul>\n<li>fundamental types of routing needed. The CLASS, or blueprint of how the exchange should work.</li>\n</ul>\n</li>\n<li>Exchange instance?\n<ul>\n<li>default instances + the exchanges you initialize (🌟 in rabbitmq management dashboard, you can see the default exchanges when you boot up.)</li>\n</ul>\n</li>\n<li>🌟 type &#x26; instance here seems almost identical to OOP class &#x26; instance</li>\n</ul>\n</li>\n<li>Exchange is intended to add extensibility to AMQP for interoperability\n<ul>\n<li>🌟 this means => <span class=\"text-skyblue\">Since we need to allow Java - JS - Python - multiple different environments to be communicable via AMQP (interoperability), we needed to create Exchange within AMQP protocol to handle complex situations.</span></li>\n</ul>\n</li>\n</ul>\n<h3>2.1.1.3 The Routing Key</h3>\n<ul>\n<li>routing key is <span class=\"text-orange\"><strong>only used within the server</strong></span>.</li>\n<li>it is used with different algorithms for different exchange types.</li>\n</ul>\n<h3>2.1.1.4 Analogy to Email</h3>\n<ul>\n<li>AMQP message ≈ email message</li>\n<li>queue ≈ mailbox</li>\n<li>consumer ≈ mail client (gmail) that reads and delets email</li>\n<li>exchanges ≈ MTA (mail transfer agent)</li>\n<li>routing key ≈ email To:, Cc: address</li>\n<li>binding ≈ MTA routing table</li>\n</ul>\n<p>the difference:</p>\n<ul>\n<li>amqp is for internal services (store messages within a server)</li>\n<li>VS email servers send emails here and there between servers.</li>\n</ul>\n<p>you need to setup explicit bridges for amqp - amqp server connection</p>\n<h3>2.1.2 Message Flow</h3>\n<h3>2.1.2.1 Message Life-cycle</h3>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre class=\"language-mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TD\n    A<span class=\"token text string\">[Producer creates Message]</span>\n    B[📝 Adds Content +\n    Properties + Routing Info]\n    C[📮 Sends Message to\n    Exchange]\n    D<span class=\"token punctuation\">{</span>🔀 Can the Exchange\n    Route it?<span class=\"token punctuation\">}</span>\n    E1<span class=\"token text string\">[🗑️ Drop or Return]</span>\n    E2[➡️ Route to One\n    or More Queues]\n    F[📥 Message Arrives\n    in Queue]\n    G<span class=\"token punctuation\">{</span>👀 Is a Consumer\n    Available?<span class=\"token punctuation\">}</span>\n    H1[📨 Deliver\n    Immediately]\n    H2[💾 Store in Memory\n     or Disk]\n    I<span class=\"token text string\">[📬 Deliver to Consumer]</span>\n    J<span class=\"token text string\">{✅ Consumer Ack?}</span>\n    K1<span class=\"token text string\">[🧹 Remove from Queue]</span>\n    K2<span class=\"token text string\">[⛔ Reject - Nack]</span>\n\n    <span class=\"token keyword\">subgraph</span> Transaction\n      L1[📦 Grouped Producer\n      Messages]\n      L2<span class=\"token text string\">[🧾 Grouped Consumer Acks]</span>\n      L3<span class=\"token text string\">[✅ Commit or ❌ Rollback]</span>\n    <span class=\"token keyword\">end</span>\n\n    A <span class=\"token arrow operator\">--></span> B <span class=\"token arrow operator\">--></span> C <span class=\"token arrow operator\">--></span> D\n    D <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">No</span> <span class=\"token arrow operator\">--></span></span> E1\n    D <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Yes</span> <span class=\"token arrow operator\">--></span></span> E2 <span class=\"token arrow operator\">--></span> F <span class=\"token arrow operator\">--></span> G\n    G <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Yes</span> <span class=\"token arrow operator\">--></span></span> H1 <span class=\"token arrow operator\">--></span> I\n    G <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">No</span> <span class=\"token arrow operator\">--></span></span> H2\n    I <span class=\"token arrow operator\">--></span> J\n    J <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Ack</span> <span class=\"token arrow operator\">--></span></span> K1\n    J <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Nack</span> <span class=\"token arrow operator\">--></span></span> K2\n    A <span class=\"token arrow operator\">--></span> L1\n    J <span class=\"token arrow operator\">--></span> L2\n    L1 <span class=\"token arrow operator\">--></span> L3\n    L2 <span class=\"token arrow operator\">--></span> L3\n</code></pre></div>\n<ul>\n<li>🌟 I was surprised there was transaction feature in amqp.</li>\n</ul>\n<h3>2.1.2.2 What The Producer Sees</h3>\n<ul>\n<li>messages never goes directly to queues.</li>\n<li>messages should always go through exchange(s).</li>\n<li>producer only sees exchange(s).</li>\n</ul>\n<h3>2.1.2.3 What The Consumer Sees</h3>\n<ul>\n<li>consumer sees a lot more than a simple email consumer.\n<ul>\n<li>can create or destroy mqs</li>\n<li>can make bindings. (bindings define how the mq is filled)</li>\n<li>select different exchanges</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.2.4 Automatic Mode</h3>\n<p>there is default mode since amqp don't need to be all this complicated in most cases:</p>\n<ul>\n<li>default exchange exists</li>\n<li>default routing logic: routing key is mapped to the queue of the same name.</li>\n</ul>\n<h3>2.1.3 Exchanges</h3>\n<h3>2.1.3.1 Types of Exchange</h3>\n<ul>\n<li>direct: routing key exact match</li>\n<li>topic: routing key pattern match (*, #)\n<ul>\n<li>🌟 * is any single word and # is zero or multiple words</li>\n</ul>\n</li>\n</ul>\n<p>there are others specified in \"Functional Specification\" Section</p>\n<h3>2.1.3.2 Exchange Life-cycle</h3>\n<ul>\n<li>default exchanges are not removeable.</li>\n<li>there is no \"create exchange\" but rather \"declare exchange\" which means something similar to what we do in dbs: \"CREATE 'x' IF NOT EXISTS\"</li>\n<li>it is uncommon to remove exchanges.</li>\n</ul>\n<h3>2.1.4 Message Queues</h3>\n<h3>2.1.4.1 Message Queue Properties</h3>\n<ul>\n<li>name:\n<ul>\n<li>bp is to use random name generated by server if a single application is using it for its own purpose</li>\n<li>otherwise, set it up front, cohering to other applications which use the same queues.</li>\n</ul>\n</li>\n<li>exclusive:\n<ul>\n<li>current connection only</li>\n<li>deleted when connection closes</li>\n</ul>\n</li>\n<li>durable:\n<ul>\n<li>queue remains present and active when server restarts.</li>\n<li>might lose message when server restarts though!</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.4.2 Queue Life-cycles</h3>\n<p>two main types + possible other types.</p>\n<ul>\n<li>Durable MQ: lives even though nobody is consuming</li>\n<li>Temporary MQ: deleted when consumer disconnects</li>\n<li>Shared MQ: deleted when last consumer disconnects</li>\n<li>x MQ: might be other patterns as well.</li>\n</ul>\n<h3>2.1.5 Bindings</h3>\n<ul>\n<li>bindings = logic for exchange to mq</li>\n<li>constructed from the client application (one owning the mq)</li>\n</ul>\n<h3>2.1.5.1 Constructing a Shared Queue</h3>\n<ul>\n<li>wip</li>\n</ul>\n<h3>2.1.5.2 Constructing a Reply Queue</h3>\n<ul>\n<li>wip</li>\n</ul>\n<h3>2.1.5.3 Constructing a Pub-Sub Subscription Queue</h3>\n<ul>\n<li>wip</li>\n</ul>","frontmatter":{"date":"June 08, 2025","slug":"/blog/amqp-spec","title":"AMQP Specification Review (section 2.1 only)","subtitle":"Summary and review of the important bits of the amqp spec's section 2.1"}}},"pageContext":{"id":"201b8d77-c2af-5a19-89f3-f210fcc2cbd1","frontmatter__slug":"/blog/amqp-spec","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}