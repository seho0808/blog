{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/effective-typescript-review/","result":{"data":{"markdownRemark":{"html":"<h2><strong>이펙티브 타입스크립트</strong></h2>\n<p class=\"text-time\">최초 업로드 2024-01-14 / 마지막 수정 2024-01-14</p>\n<br/>\n<p>이펙티브 타입스크립트 공부하며 인상적이었던 내용을 정리하려고 한다.</p>\n<br/>\n<h3><strong>아이템 7 - 타입 유니온/인터섹션</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\r\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">{</span>\r\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n  z<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">temp1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'y'</span>\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">temp2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'y'</span>\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">temp3</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'x' | 'y' | 'z'</span>\r\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">temp4</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'x' | 'y' | 'z'</span>\r\n\r\n<span class=\"token keyword\">const</span> v1<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  y<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  z<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> v2<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  y<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  z<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n  s<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이건 오브젝트 리터럴이라 개방 폐쇄 불가능. 해당 라인은 오류임!!</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">A | B</code>와 <code class=\"language-text\">A &amp; B</code>가 타입스크립트에서는 반대로 쓰인다. 이 점을 명심하자. <code class=\"language-text\">\"a\" | \"b\"</code> 와 <code class=\"language-text\">A | B</code>가 다르게 작동한다.\r\n책에서는 가독성을 높이기 위해 extends를 쓰라고 한다. 그리고 extends를 쓸 때, 집합을 보듯이 봐야 잘 읽힌다고 나와있다.</p>\n<br/>\n<h3><strong>아이템 8 - 값 typeof vs 타입 typeof</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\r\n  width<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n  height<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> carInstance<span class=\"token operator\">:</span> Car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방식 1: 맞음.</span>\r\n<span class=\"token keyword\">const</span> carInstance2<span class=\"token operator\">:</span> InstanceType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Car<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 방식 2: 맞음.</span>\r\n<span class=\"token keyword\">const</span> carInstance3<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> Car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류. typeof Car은 생성자 타입이다.</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">Car</code>은 인스턴스 타입을 가리킨다. <code class=\"language-text\">new Car()</code>로 생성된 인스턴스의 타입이다. <code class=\"language-text\">typeof Car</code>은 <code class=\"language-text\">Car</code> 클래스의 생성자 타입이다.\r\n<code class=\"language-text\">InstanceType&lt;생성자 타입></code>을 통해 다시 인스턴스 타입으로 돌려놓을 수 있다.</p>\n<br/>\n<h3><strong>아이템 9 - 단언 보다 선언 쓰기</strong></h3>\n<p>단언이 꼭 필요한 경우에서 내가 며칠 전에 썼던 정확한 유스케이스가 나와서 반가웠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#myButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EventTarget type은 너무 broad한 타입이다.</span>\r\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이제 HTMLButtonElement에서 구현되어있는 필드를 사용할 수 있다.</span>\r\n  <span class=\"token comment\">// ...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p>타입스크립트에서는 컴파일 타임에 DOM에 접근할 수 없고, 뭐가 정확히 튀어나오는지 모르기 때문에 우리가 타입 단언을 해주어야 문제 없이 사용할 수 있다.</p>\n<p>그리고 타입 단언은 서브타입에서만 쓸 수 있다고 한다! 사실 그 외에 써본 적이 없어서 해당 오류를 마주한 적이 없었다.</p>","frontmatter":{"date":"January 14, 2023","slug":"/blog/effective-typescript-review","title":"이펙티브 타입스크립트","subtitle":"이펙티브 타입스크립트에서 인상적이었던 내용들"}}},"pageContext":{"id":"9761aff4-ac96-582d-803f-940e7398151e","frontmatter__slug":"/blog/effective-typescript-review","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}