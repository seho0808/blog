{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/state-management/","result":{"data":{"markdownRemark":{"html":"<h2><strong>[FE] 상태 관리에 대한 고찰</strong></h2>\n<p class=\"text-time\">최초 업로드 2024-01-07 / 마지막 수정 2024-03-14</p>\n<br/>\n<p>이틀간 상태 관리에 대해 깊게 생각해본 결과, 상태 관리는 음악 장르와 같다는 결론에 이르렀다.\r\n사람들은 MVC, MVVM, Flux 등의 아키텍처로 특정 라이브러리들을 분류하고 싶어하고, 나 또한 그렇게 나누어서 편하게 생각하고 싶다.\r\n하지만 깊게 파면 팔수록 특정 라이브러리는 특정 패턴에 부합하는 것과는 거리가 멀었다. 음악으로 생각해보면,\r\n베토벤은 당연히 클래식이라고 생각할 수 있고 비틀즈를 팝이라고 생각할 수 있지만, 최근 나오는 음악들은 힙합, 재즈, 팝, 발라드\r\n모두 섞여있는 형태이다. KPOP이 특히 더 그렇다. 랩하다가 고음 노래 부르고 갑자기 EDM 드롭이 나오고...</p>\n<p>그래서 우리는 가수이름, 혹은 앨범 이름으로 부르는 것을 점차 선호하게 되었다. 이제는 앨범마다도 워낙 느낌이 달라서 각 앨범 고유의 영역들이 생겨났다.\r\n이것과 정말 비슷하게도, React, Redux, Mobx, Angular, Vue를 어디 하나의 아키텍처에 꼭 맞게 설명한다는 것이 어렵다. 그래서 내가 내린 결론은 아래와 같다.</p>\n<ol>\n<li>상태 관리를 직접 구현해야 한다면, 먼저 참고할 라이브러리/아키텍처들을 종이에 나열해본다.</li>\n<li>라이브러리/아키텍처들 마다 고려할 점들을 표로 정리해서 각 라이브러리들 마다 특정 부분(Aspect라 칭하자)이 어떤식으로 구현되어있는지 조사한다.</li>\n<li>각 Aspect 마다 한 개 선택 or 복수 선택 or 새로 구현을 체크한다.</li>\n<li>그렇게 짜여진 새로운 레시피로 상태 관리를 구현한다.</li>\n</ol>\n<p>이는 하나의 어프로치일 뿐이긴하지만 가장 나이브하면서 쉬운 방식이다.\r\n여러 개의 아키텍처를 직접 구현해본 결과 자동으로 뇌에서 추상화가 안되는 것을 보면 이렇게 수동-분석적으로 접근해야한다고 생각했다.</p>\n<br/>\n<h2><strong>상태 관리들을 비교해서 취사선택하자</strong></h2>\n<p>직접 상태 관리 라이브러리를 조합해서 만들어보자. 일단 그러려면 Aspect 표를 만들어야한다.</p>\n<table>\n<thead>\n<tr>\n<th>Approach</th>\n<th>컴포넌트-상태 바인딩</th>\n<th>데이터 흐름</th>\n<th>UI 문법</th>\n<th>Architecture</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Redux</td>\n<td>Subscription으로 파악</td>\n<td>단방향</td>\n<td>-</td>\n<td>Flux-inspired</td>\n</tr>\n<tr>\n<td>React Hooks</td>\n<td>UI Tree 위치로 파악</td>\n<td>단방향</td>\n<td>JSX (AST)</td>\n<td>Component-based</td>\n</tr>\n<tr>\n<td>Angular</td>\n<td>Observable로 파악 (RxJS)</td>\n<td>단방향</td>\n<td>Angular Templates (AST)</td>\n<td>MVVM-inspired</td>\n</tr>\n<tr>\n<td>Svelte</td>\n<td>Reactive Assignment</td>\n<td>단방향</td>\n<td>Svelte Custom (AST)</td>\n<td>Reactive/Compiler</td>\n</tr>\n<tr>\n<td>취사선택</td>\n<td>Reactive Assignment</td>\n<td>단방향</td>\n<td>새로 제작 (AST)</td>\n<td>MVC-inspired or Component-based</td>\n</tr>\n</tbody>\n</table>\n<p>더 다양한 열들을 추가할 수 있지만, 현재로서는 떠오르는 것이 크게 없다.</p>\n<br/>\n<h2><strong>몇 주 뒤에 든 생각</strong></h2>\n<p>포스트를 작성하고 몇 주 뒤에 실제로 두 가지의 상태 관리를 제작해본 결과 상태 관리는 그냥 콜백의 묶음이라고 보는 것이 맞을 것 같다.\r\n위 처럼 비교 분석하는 것은 뭐 아키텍처적으로는 의미가 있을지 모르겠다. 하지만 상태관리 그 자체는 그저 값이 변경될 때 어떠한 사이드이펙트(부수효과)가 생기는\r\n것일 뿐이다. 그리고 그 사이드이펙트는 콜백 묶음일 뿐이다. 나중에 더 다양한 상태관리 내부 동작을 깨닫게 되면 또 생각이 바뀔지도 모르겠다.</p>","frontmatter":{"date":"January 07, 2024","slug":"/blog/state-management","title":"[FE] 상태 관리에 대한 고찰","subtitle":"다양한 상태 관리 라이브러리들을 비교해보자."}}},"pageContext":{"id":"775510cf-4170-5caa-8ac8-f4bf2c03f1fa","frontmatter__slug":"/blog/state-management","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}