{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/blog/benchmark-js/","result":{"data":{"markdownRemark":{"html":"<h2><strong>innerHTML vs createElement 속도 벤치마킹 해보기</strong></h2>\n<p class=\"text-time\">최초 업로드 2023-02-12 / 마지막 수정 2023-02-20</p>\n<p>innerHTML vs createElement 속도 비교가 궁금해서 테스팅해보았다.</p>\n<ul>\n<li>단 하나의 createElement는 단 한 줄의 innerHTML 보다 빠르다.</li>\n<li>4~5개의 createElement는 4~5줄의 innerHTML과 속도가 비슷하다.</li>\n<li>100줄의 createElement는 100줄의 innerHTML 보다 훨씬 느리다.</li>\n</ul>\n<p>결론: 속도 면에서는 innerHTML이 절대 뒤지는 편이 아니다. 대신 innerHTML을 한줄씩 계속 파싱하면 조금 느리긴하다. 하지만\r\n대량의 html 스트링을 한 번에 파싱할 때에는 createElement 보다 innerHTML이 월등히 좋다.</p>\n<deckgo-highlight-code language=\"js\" terminal=\"carbon\" theme=\"monokai\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/platform/1.3.6/platform.min.js&quot;&gt;&lt;/script&gt;\r\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/benchmark/2.1.4/benchmark.min.js&quot;&gt;&lt;/script&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;script&gt;\r\n      console.log(&quot;Benchmark starting...&quot;);\r\n      var suite = new Benchmark.Suite();\r\n\r\n      // add tests\r\n      suite\r\n        .add(&quot;FirstTest&quot;, function () {\r\n          // create5Children() // 1세트\r\n          // create100Children() // 2세트\r\n          createEvent100Children(); // 3세트\r\n        })\r\n        .add(&quot;SecondTest&quot;, function () {\r\n          // parse5Children() // 1세트\r\n          // parse100Children() // 2세트\r\n          parseEvent100Children(); // 3세트\r\n        })\r\n        // add listeners\r\n        .on(&quot;cycle&quot;, function (event) {\r\n          const test = event.target;\r\n          console.log(test.name + &quot; completed.&quot;);\r\n          console.log(String(test)); // Logs the test name and its performance metrics\r\n          console.log(&quot;Time taken: &quot; + test.stats.mean * 1000 + &quot; ms&quot;); // Specifically logs the time taken\r\n        })\r\n        .on(&quot;complete&quot;, function () {\r\n          console.log(&quot;Fastest is &quot; + this.filter(&quot;fastest&quot;).map(&quot;name&quot;));\r\n        })\r\n        // run async\r\n        .run({ async: true });\r\n\r\n      // 벤치마크 1세트\r\n      function create5Children() {\r\n        const div = document.createElement(&quot;div&quot;);\r\n        const children = [];\r\n        for (let i = 0; i &lt; 5; i++) {\r\n          const temp = document.createElement(&quot;div&quot;);\r\n          temp.textContent = &quot;hello&quot;;\r\n          children.push(temp);\r\n        }\r\n        div.append(...children);\r\n      }\r\n\r\n      // 벤치마크 1세트 =&gt; 다를 바가 없음. 거의 같음.\r\n      function parse5Children() {\r\n        const div = document.createElement(&quot;div&quot;);\r\n        let str = &quot;&quot;;\r\n        for (let i = 0; i &lt; 5; i++) {\r\n          str += `&lt;div&gt;hello&lt;/div&gt;`;\r\n        }\r\n        div.innerHTML = str;\r\n      }\r\n\r\n      // 벤치마크 2세트\r\n      function create100Children() {\r\n        const div = document.createElement(&quot;div&quot;);\r\n        const children = [];\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          const temp = document.createElement(&quot;div&quot;);\r\n          temp.textContent = &quot;hello&quot;;\r\n          children.push(temp);\r\n        }\r\n        div.append(...children);\r\n      }\r\n\r\n      // 벤치마크 2세트 =&gt; 근소하게 더 빠름.\r\n      function parse100Children() {\r\n        const div = document.createElement(&quot;div&quot;);\r\n        let str = &quot;&quot;;\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          str += `&lt;div&gt;hello&lt;/div&gt;`;\r\n        }\r\n        div.innerHTML = str;\r\n      }\r\n\r\n      // 벤치마크 3세트\r\n      function createEvent100Children() {\r\n        // 0.205 ms ~ 0.312 ms\r\n        const div = document.createElement(&quot;div&quot;);\r\n        const children = [];\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          const temp = document.createElement(&quot;div&quot;);\r\n          temp.textContent = &quot;hello&quot;;\r\n          temp.addEventListener(&quot;click&quot;, () =&gt; console.log(&quot;hi&quot;));\r\n          children.push(temp);\r\n        }\r\n        div.append(...children);\r\n      }\r\n\r\n      // 벤치마크 3세트\r\n      function parseEvent100Children() {\r\n        // 0.218 ms ~ 0.248 ms\r\n        const div = document.createElement(&quot;div&quot;);\r\n        let str = &quot;&quot;;\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          str += `&lt;div&gt;hello&lt;/div&gt;`;\r\n        }\r\n        div.innerHTML = str;\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          div.children[i].addEventListener(&quot;click&quot;, () =&gt; console.log(&quot;hi&quot;));\r\n        }\r\n      }\r\n\r\n      function parseEvent100Children2() {\r\n        // 2.452 ms\r\n        const div = document.createElement(&quot;div&quot;);\r\n        const children = [];\r\n        for (let i = 0; i &lt; 100; i++) {\r\n          const temp = htmlStringToDomNode(`&lt;div&gt;hello&lt;/div&gt;`);\r\n          temp.addEventListener(&quot;click&quot;, () =&gt; console.log(&quot;hi&quot;));\r\n          children.push(temp);\r\n        }\r\n        div.append(...children);\r\n      }\r\n\r\n      // 유틸\r\n      function htmlStringToDomNode(htmlString) {\r\n        var parser = new DOMParser();\r\n        var doc = parser.parseFromString(htmlString, &quot;text/html&quot;);\r\n        return doc.body.firstChild;\r\n      }\r\n    &lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>","frontmatter":{"date":"February 12, 2024","slug":"/blog/benchmark-js","title":"innerHTML vs createElement 속도","subtitle":"JS 코드의 속도를 비교 테스팅해보자 - innerHTML vs createElement"}}},"pageContext":{"id":"18785002-39f1-51c1-8ba8-110469a425e3","frontmatter__slug":"/blog/benchmark-js","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["1865044719","2228436175","326441978"],"slicesMap":{}}