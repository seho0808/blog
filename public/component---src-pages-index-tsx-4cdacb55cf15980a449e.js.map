{"version":3,"file":"component---src-pages-index-tsx-4cdacb55cf15980a449e.js","mappings":"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","sources":["webpack://gatsby-starter-minimal-ts/./src/components/Menubar/PostList.tsx","webpack://gatsby-starter-minimal-ts/./src/components/layouts/Explorer.tsx","webpack://gatsby-starter-minimal-ts/./src/components/layouts/Menubar.tsx","webpack://gatsby-starter-minimal-ts/./src/components/layouts/CodeSpace.tsx","webpack://gatsby-starter-minimal-ts/./src/pages/index.tsx","webpack://gatsby-starter-minimal-ts/./src/utils/sessionStorage.ts"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useStaticQuery, graphql, Link } from \"gatsby\";\r\nimport {\r\n  loadOpenFolders,\r\n  loadTabsInfo,\r\n  saveOpenFolders,\r\n  saveTabsInfo,\r\n} from \"../../utils/sessionStorage\";\r\nimport { TabsInfo } from \"../../types/types\";\r\nimport { useLocation } from \"@reach/router\";\r\n\r\n// TODO: check if slug and title structure and graphql usage is optimal\r\ntype Node = {\r\n  relativePath: string;\r\n  name: string;\r\n  childMarkdownRemark: {\r\n    frontmatter: {\r\n      title: string;\r\n      slug: string;\r\n    };\r\n  };\r\n};\r\n\r\ntype FileNode = {\r\n  title: string;\r\n  slug: string;\r\n};\r\n\r\ntype Tree = {\r\n  [key: string]: Tree | FileNode;\r\n};\r\n\r\nconst extractFolderNames = (allFiles: { node: Node }[], pathName: string) => {\r\n  let res = [] as string[];\r\n  allFiles.forEach(({ node }) => {\r\n    if (node.childMarkdownRemark.frontmatter.slug + \"/\" !== pathName) return;\r\n    res = node.relativePath.split(\"/\").filter(Boolean);\r\n    res.pop(); // remove file name\r\n  });\r\n  return res;\r\n};\r\n\r\n/**\r\n * Uses recursion to create Tree structure for rendering Explorer Tab.\r\n */\r\nconst PostList = () => {\r\n  const location = useLocation();\r\n  const [openFolders, setOpenFolders] = useState<string[]>([]);\r\n  const data: { node: Node }[] = useStaticQuery(graphql`\r\n    query {\r\n      allFile {\r\n        edges {\r\n          node {\r\n            relativePath\r\n            name\r\n            childMarkdownRemark {\r\n              frontmatter {\r\n                title\r\n                slug\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `).allFile.edges;\r\n\r\n  /**\r\n   * On initial render, guarantee that all folders(directories) to current page is open.\r\n   * To do so flawlessly, I moved initial openFolders value to be inited here instead.\r\n   **/\r\n  useEffect(() => {\r\n    const openFolders = loadOpenFolders();\r\n    const mustOpen = extractFolderNames(data, location.pathname);\r\n    const merged = Array.from(new Set([...openFolders, ...mustOpen]));\r\n    setOpenFolders(merged);\r\n    saveOpenFolders(merged);\r\n  }, []);\r\n\r\n  // convert\r\n  const treeData = transformDataToTree(data);\r\n\r\n  /**\r\n   * Flips status of open folder on UI AND Session Storage\r\n   * - Having folder names in string list makes O(n^2) search on render, but\r\n   * n < 200, so shouldn't be too much of an issue.\r\n   * - don't need to use usecallback since renderTree renders anyway due to `openFolders` state change\r\n   * @param folderName folderName to Open or Close\r\n   */\r\n  const handleFolderClick = (folderName: string) => {\r\n    setOpenFolders((prev) => {\r\n      if (prev.includes(folderName)) {\r\n        const newList = prev.filter((n) => n !== folderName);\r\n        saveOpenFolders(newList);\r\n        return newList;\r\n      } else {\r\n        const newList = [...prev, folderName];\r\n        saveOpenFolders(newList);\r\n        return newList;\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={treeWrapperStyle}>\r\n      <RenderTree\r\n        tree={treeData}\r\n        currSlug={location.pathname.slice(0, -1)}\r\n        depth={0}\r\n        openTrees={openFolders}\r\n        handleFolderClick={handleFolderClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * converts 1d files array into tree structure that parses all directories and files used\r\n * @param edges\r\n * @returns object literal that represents a file tree\r\n */\r\nconst transformDataToTree = (edges: { node: Node }[]) => {\r\n  const tree = {} as Tree;\r\n\r\n  edges.forEach(({ node }) => {\r\n    const filename = node.name;\r\n    const slug = node.childMarkdownRemark.frontmatter.slug;\r\n    const title = node.childMarkdownRemark.frontmatter.title;\r\n    const pathParts = node.relativePath.split(\"/\").filter(Boolean);\r\n    let currentLevel = tree;\r\n\r\n    pathParts.forEach((part, index) => {\r\n      // last one is file\r\n      if (index === pathParts.length - 1) {\r\n        currentLevel[filename] = { title: title, slug: slug };\r\n        return;\r\n      }\r\n      // rest are directory\r\n      if (!currentLevel[part]) {\r\n        currentLevel[part] = {};\r\n      }\r\n      currentLevel = currentLevel[part] as Tree;\r\n    });\r\n  });\r\n\r\n  return tree;\r\n};\r\n\r\n/**\r\n * renders tree data into an actual dom element\r\n * @param param0\r\n * @returns Explorer UI\r\n */\r\nconst RenderTree = ({\r\n  tree,\r\n  currSlug,\r\n  depth,\r\n  openTrees,\r\n  handleFolderClick,\r\n}: {\r\n  tree: Tree;\r\n  currSlug: string;\r\n  depth: number;\r\n  openTrees: string[];\r\n  handleFolderClick: (folderName: string) => void;\r\n}) => {\r\n  const files = [];\r\n  const dirs = [];\r\n  for (let key in tree) {\r\n    if (tree[key].title) {\r\n      files.push(tree[key] as FileNode);\r\n    } else {\r\n      dirs.push({ dirname: key, tree: tree[key] as Tree });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ul style={ulStyle}>\r\n      {/* first, render the file list */}\r\n      {files.map((f) => (\r\n        <Link to={f.slug} style={linkStyle} key={f.slug}>\r\n          <li style={liStyle}>\r\n            {/* color background if the file is selected. */}\r\n            <div\r\n              style={\r\n                currSlug === f.slug\r\n                  ? { ...lineStyle, backgroundColor: \"#414339\" }\r\n                  : lineStyle\r\n              }\r\n            >\r\n              {/* file hierarchy indent is done like this to keep the background color fully colored when selected */}\r\n              <img\r\n                src=\"/file-document.svg\"\r\n                style={{ ...iconStyle, paddingLeft: `${8 * depth}px` }} // file hierarchy indent\r\n              />\r\n              {f.title}\r\n            </div>\r\n          </li>\r\n        </Link>\r\n      ))}\r\n      {/* secondly, render the directory(folders) list */}\r\n      {dirs.map((d) => {\r\n        const isOpen = openTrees.includes(d.dirname);\r\n        return (\r\n          <li key={d.dirname} style={liStyle}>\r\n            {/* clickable component for folder closing / opening */}\r\n            <div style={lineStyle} onClick={() => handleFolderClick(d.dirname)}>\r\n              <img\r\n                src={isOpen ? \"/folder-open.svg\" : \"/folder.svg\"}\r\n                style={{ ...iconStyle, paddingLeft: `${8 * depth}px` }} // file hierarchy indent\r\n              />\r\n              {d.dirname}\r\n            </div>\r\n            {/* render children if folder is open */}\r\n            <div style={isOpen ? {} : { display: \"none\" }}>\r\n              <RenderTree\r\n                tree={d.tree}\r\n                currSlug={currSlug}\r\n                depth={depth + 1}\r\n                openTrees={openTrees}\r\n                handleFolderClick={handleFolderClick}\r\n              />\r\n            </div>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n\r\nconst treeWrapperStyle = {\r\n  marginTop: \"0px\",\r\n  fontSize: \"12px\",\r\n};\r\n\r\nconst ulStyle = {\r\n  listStyleType: \"none\",\r\n  margin: \"0px 0px\",\r\n  padding: \"0px 0px\",\r\n  color: \"#ccc\",\r\n};\r\n\r\nconst liStyle = {};\r\n\r\nconst linkStyle = { textDecoration: \"none\", color: \"#ccc\" };\r\n\r\nconst iconStyle = {\r\n  margin: \"0px 8px\",\r\n  width: \"16px\",\r\n};\r\n\r\nconst lineStyle = {\r\n  padding: \"4px 0px\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  cursor: \"pointer\",\r\n};\r\n","import * as React from \"react\";\r\nimport PostList from \"../Menubar/PostList\";\r\n\r\nconst asideStyle = {\r\n  backgroundColor: \"#1E1F1C\",\r\n  minHeight: \"100vh\",\r\n  minWidth: \"275px\",\r\n  color: \"#ccc\",\r\n  cursor: \"default\",\r\n  userSelect: \"none\" as const,\r\n};\r\n\r\nconst titleStyle = {\r\n  padding: \"10px 14px\",\r\n  fontSize: \"12px\",\r\n};\r\n\r\nconst subTitleStyle = {\r\n  backgroundColor: \"#272822\",\r\n  padding: \"4px 2px\",\r\n  fontSize: \"12px\",\r\n  fontWeight: 800,\r\n};\r\n\r\nexport default function Explorer() {\r\n  return (\r\n    <aside style={asideStyle}>\r\n      <div style={titleStyle}>EXPLORER</div>\r\n      <div style={subTitleStyle}>\r\n        <img\r\n          src=\"/arrow-down.svg\"\r\n          style={{ verticalAlign: \"0%\", paddingRight: \"2px\" }}\r\n        />\r\n        LOCAL &#40;seholee.com&#41;\r\n      </div>\r\n      <PostList />\r\n    </aside>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst asideStyle = {\r\n  backgroundColor: \"#272822\",\r\n  minHeight: \"100vh\",\r\n  textAlign: \"center\" as const,\r\n  width: \"48px\",\r\n};\r\n\r\nconst topStyle = {\r\n  paddingTop: \"10px\",\r\n};\r\n\r\nexport default function Menubar() {\r\n  return (\r\n    <aside style={asideStyle}>\r\n      <img src=\"/folder_sax.svg\" style={topStyle} />\r\n    </aside>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst pageStyles = {\r\n  backgroundColor: \"#272822\",\r\n  minHeight: \"100vh\",\r\n  flexGrow: 1,\r\n};\r\n\r\nexport default function CodeSpace() {\r\n  return <main style={pageStyles}>asdf</main>;\r\n}\r\n","import * as React from \"react\";\r\nimport type { HeadFC, PageProps } from \"gatsby\";\r\nimport CodeSpace from \"../components/layouts/CodeSpace\";\r\nimport Explorer from \"../components/layouts/Explorer\";\r\nimport Menubar from \"../components/layouts/Menubar\";\r\n\r\nconst layoutStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst IndexPage: React.FC<PageProps> = () => {\r\n  return (\r\n    <div style={layoutStyle}>\r\n      <Menubar />\r\n      <Explorer />\r\n      <CodeSpace />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const Head: HeadFC = () => <title>Home Page</title>;\r\n","import { TabsInfo } from \"../types/types\";\r\n\r\n/**\r\n * save open tabs information\r\n * @param state tabs that are open\r\n */\r\nexport const saveTabsInfo = (state: TabsInfo[]) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    sessionStorage.setItem(\"tabsInfo\", serializedState);\r\n  } catch (err) {\r\n    console.log(\"unexpected error at saveTabsInfo\");\r\n  }\r\n};\r\n/**\r\n * get open tabs information\r\n * @returns tabs that are open\r\n */\r\nexport const loadTabsInfo = () => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"tabsInfo\");\r\n    if (serializedState === null) {\r\n      return []; // No state saved in session storage\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    console.log(\"unexpected error at loadTabsInfo\");\r\n    return []; // Handle errors or invalid state\r\n  }\r\n};\r\n\r\n/**\r\n * remove certain slug from session storage tabs data\r\n * @param slug\r\n * @returns false if something went wrong. true if executed.\r\n */\r\nexport const removeTabsInfo = (slug: string) => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"tabsInfo\");\r\n    if (serializedState === null) {\r\n      console.log(\"slug does not exist in storage\");\r\n      return false;\r\n    }\r\n    const res = JSON.parse(serializedState).filter(\r\n      (d: TabsInfo) => d.slug !== slug\r\n    );\r\n    sessionStorage.setItem(\"tabsInfo\", JSON.stringify(res));\r\n    return true;\r\n  } catch (err) {\r\n    console.log(\"unexpected error at removeTabsInfo\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * save list of open folder names to session storage\r\n * @param folderNames folder names to save\r\n */\r\nexport const saveOpenFolders = (folderNames: string[]) => {\r\n  try {\r\n    sessionStorage.setItem(\"openFolders\", JSON.stringify(folderNames));\r\n    return true;\r\n  } catch (e) {\r\n    console.log(\"unexpected error at addOpenFolders\");\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * load open folders informations\r\n * @returns open folders' names\r\n */\r\nexport const loadOpenFolders = () => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"openFolders\");\r\n    if (serializedState === null) {\r\n      return []; // No state saved in session storage\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (e) {\r\n    console.log(\"unexpected error at loadOpenFolders\");\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * close folder and remove name from session storage\r\n * @param folderName folder name to remove\r\n */\r\nexport const removeOpenFolders = (folderName: string) => {\r\n  try {\r\n    const serializedState = sessionStorage.getItem(\"openFolders\");\r\n    if (serializedState !== null) {\r\n      sessionStorage.setItem(\r\n        \"openFolders\",\r\n        JSON.stringify([\r\n          ...JSON.parse(serializedState).filter(\r\n            (name: string) => name !== folderName\r\n          ),\r\n        ])\r\n      );\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (e) {\r\n    console.log(\"unexpected error at removeOpenFolders\");\r\n    return false;\r\n  }\r\n};\r\n"],"names":["transformDataToTree","edges","tree","forEach","_ref2","node","filename","name","slug","childMarkdownRemark","frontmatter","title","pathParts","relativePath","split","filter","Boolean","currentLevel","part","index","length","RenderTree","_ref3","currSlug","depth","openTrees","handleFolderClick","files","dirs","key","push","dirname","React","style","ulStyle","map","f","Link","to","linkStyle","liStyle","lineStyle","backgroundColor","src","iconStyle","paddingLeft","d","isOpen","includes","onClick","display","PostList","location","useLocation","openFolders","setOpenFolders","useState","data","useStaticQuery","allFile","useEffect","loadOpenFolders","mustOpen","extractFolderNames","allFiles","pathName","res","_ref","pop","pathname","merged","Array","from","Set","saveOpenFolders","treeData","treeWrapperStyle","slice","folderName","prev","newList","n","marginTop","fontSize","listStyleType","margin","padding","color","textDecoration","width","alignItems","cursor","asideStyle","minHeight","minWidth","userSelect","titleStyle","subTitleStyle","fontWeight","Explorer","verticalAlign","paddingRight","textAlign","topStyle","paddingTop","Menubar","pageStyles","flexGrow","CodeSpace","layoutStyle","IndexPage","Head","saveTabsInfo","state","serializedState","JSON","stringify","sessionStorage","setItem","err","console","log","loadTabsInfo","getItem","parse","removeTabsInfo","folderNames","e"],"sourceRoot":""}